<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows10.0.19041.0</TargetFramework>
<!--    <RootNamespace>WinUIDesktopSample</RootNamespace> -->
    <!--    <DefineConstants>DISABLE_XAML_GENERATED_MAIN</DefineConstants> -->
    <!--
    There seems to be a codegen bug when referencing the cswinrt interop assembly of the Win32XamlHost
    project. Since we don't really need those metadata providers yet, this is just an easy workaround
    -->
    <Platforms>x86;x64</Platforms>
    <RuntimeIdentifiers>win-x86;win-x64</RuntimeIdentifiers>
    <RuntimeIdentifier Condition="'$(Platform)'!='AnyCPU'">win-$(Platform)</RuntimeIdentifier>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.VCRTForwarders.140" Version="1.0.6" />
    <ProjectReference Include="..\..\Projections\Windows\Windows.csproj" />
    <ProjectReference Include="..\..\Projections\WinUI\WinUI.csproj" />
    <!--
      Exclude compile time assets so we don't pick up the interop assembly from the WinUI Nuget
      since we are building our own in the WinUIProjection project
    -->
    <PackageReference Include="Microsoft.WinUI" Version="$(MicrosoftWinUIVersion)" GeneratePathProperty="true">
      <ExcludeAssets>compile;runtime</ExcludeAssets>
    </PackageReference>
  </ItemGroup>

  <!--
    In additon to excluding the WinUI interop assembly above, also need to exclude 
    its transitive Microsoft.Windows.CsWinRT Nuget's winrt.runtime.dll assembly.
    But PackageReference metadata doesn't appear to support that, so removing it here.
  -->
  <Target Name="RemoveTransitivePackageAssets" AfterTargets="ResolvePackageAssets">
    <ItemGroup>
      <RuntimeCopyLocalItems Remove="@(RuntimeCopyLocalItems)" Condition="'%(RuntimeCopyLocalItems.NugetPackageId)' != '' And $([System.String]::Copy(%(RuntimeCopyLocalItems.NugetPackageId)).Contains('Microsoft.Windows.CsWinRT'))" />
    </ItemGroup>
  </Target>

</Project>